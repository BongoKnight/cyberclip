{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Installation","text":"<pre><code># Windows users might need to specify the full python.exe path\npython -m pip install \"cyberclip @ git+https://github.com/BongoKnight/cyberclip\"\n</code></pre> <ul> <li>Create the config in <code>cyberclip/data/config.yml</code> from the <code>cyberclip/data/config.yml.bak</code></li> <li>Add customs parser/actions in the <code>private</code> directory under <code>cyberclip/userAction</code> and <code>cyberclip/userTypeParser</code>, some example will be added in the \"Getting started\" tutoriel and in the <code>graveyard</code> directory.</li> </ul> <p>Then you should be able to run the script with :</p> <pre><code># On linux\ncyberclip\n# On Windows\ncyberclip.exe\n# Or alternatively with :\ncd \"C:\\Users\\&lt;user&gt;\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\cyberclip\" &amp;&amp; python3 app.py\n</code></pre>"},{"location":"#requests-and-improvments","title":"Requests and improvments","text":"<ul> <li>Feel free to open an issue if you think of other type of data to parse, or if you think of an action you would like to be applied to a specific type of data,</li> <li>Feel free to open an issue if you have some crash, I think I need to improve the error handling to avoid the crashing of the GUI </li> </ul>"},{"location":"CreateNewAction/","title":"Goal","text":"<p>This tutorial explain in depth the process to create a new action. We will create a new action for dowloading a video accessible through an URL.</p> <p>You might need to install <code>youtube-dl</code> with this command :</p> <pre><code># Install last version according to :\n# https://github.com/ytdl-org/youtube-dl/issues/31530#issuecomment-1435477247\n\npip install --upgrade --force-reinstall \"git+https://github.com/ytdl-org/youtube-dl.git\"\n</code></pre>"},{"location":"CreateNewAction/#creating-the-action-class","title":"Creating the action Class","text":"<ul> <li>Create a new file called <code>downloadAction.py</code> in the <code>userAction/private/</code> directory of your cyberclip installation.</li> <li>Paste this content inside it :</li> </ul> <pre><code># Import the actionInterface which give common behaviour to all actions\ntry:\n    from userAction.actionInterface import actionInterface\nexcept:\n    from actionInterface import actionInterface\nimport youtube_dl\n\nclass downloadVideoAction(actionInterface):\n    \"\"\"\nA action module, to download video from an URL.\nUse of the youtube-dl.\n    \"\"\"\n    def __init__(self, parsers = {}, supportedType = {\"url\"}):\n        super().__init__(parsers = parsers, supportedType = supportedType)\n        self.description = \"Download video from URL\"\n</code></pre> <p>At this time, your new action should already appears in the interface when you search for it in the command palette (<code>Ctrl+P</code>) : </p> <p></p> <p>A few things to keep in mind in order to make your action work :</p> <ul> <li>While importing action, only classes which contains <code>Action</code> in their name are imported as action,</li> <li>The <code>supportedType</code> will indicate in which case your action should be loaded. If you want your action to be always displayed in the terminal user interface (TUI), you might want to indicated your action supports <code>text</code> parser,</li> <li>The <code>self.description</code> value is used by the TUI and is displayed inside the button that triggers the action,</li> <li>The <code>docstring</code> is displayed inside the TUI command pallette and as a tooltip while hoovering the action button.</li> </ul>"},{"location":"CreateNewAction/#adding-the-logic-behind-the-action","title":"Adding the logic behind the action","text":"<p>Now in order to bring some usefullness to your action, you might want to define what your action do. Here your action should take a link in input and download video from the link. You have to define this behaviour inside the <code>execute</code> method.</p> <pre><code>    def execute(self) -&gt; object:\n        \"\"\"Execute the action.\"\"\"\n        self.get_observables()\n        self.results = {}\n        ydl_opts = {\n            'outtmpl': '~/Downloads/%(extractor_key)s/%(extractor)s-%(id)s-%(title)s.%(ext)s',\n        }\n        for url in self.observables.get(\"url\", []):\n            try:\n                with youtube_dl.YoutubeDL(ydl_opts) as ydl:\n                    ydl.download([url])\n                    self.results.update({url:\"Downloaded.\"})\n            except Exception as e:\n                self.results.update({url:f\"Error while downloading : {str(e)}\"})\n        return self.results\n\n    def __str__(self):\n        return str(self.execute())\n</code></pre> <ul> <li>A best practice is to make the <code>execute</code> method returning a dict in form of <code>{\"parsed-value\":\"result of action\"}</code>, this make the action compatible with the table view. </li> <li>The <code>__str__</code> method is here to deliver a human readable return on the action, this method is called to display the action result inside the TextArea widget in the TUI. <code>__str__</code> should call the <code>self.execute</code> method.</li> </ul> <p></p>"},{"location":"Features%20tour/","title":"Use case","text":""},{"location":"Features%20tour/#demo","title":"Demo","text":""},{"location":"Features%20tour/#features","title":"Features","text":""},{"location":"Features%20tour/#extract-data","title":"Extract data","text":"<p>At the moment, these datatypes are handled : - Text - Url - Domain - TSV - md5 and SHA1 - IP - Autonomous system number - Mail - HTML - Yara - JSON - Mitre TTP and Phones (need to be improved)</p>"},{"location":"Features%20tour/#filter-actions-by-name-and-type","title":"Filter actions by name and type","text":""},{"location":"Features%20tour/#complex-actions-with-auto-generated-input","title":"Complex actions with auto-generated input","text":""},{"location":"Features%20tour/#save-data","title":"Save data","text":"<p>Showed data can be exported to clipboard or to a file.</p>"},{"location":"docs/cyberclip/app/","title":"App","text":""},{"location":"docs/cyberclip/app/#src.cyberclip.app.ClipBrowser","title":"<code>ClipBrowser(driver_class=None, css_path=None, watch_css=False)</code>","text":"<p>             Bases: <code>App</code></p> <p>Textual clipboard browser app.</p>"},{"location":"docs/cyberclip/app/#src.cyberclip.app.ClipBrowser.compose","title":"<code>compose()</code>","text":"<p>Compose our UI.</p>"},{"location":"docs/cyberclip/clipParser/","title":"clipParser","text":""},{"location":"docs/cyberclip/clipParser/#src.cyberclip.clipParser.clipParser","title":"<code>clipParser()</code>","text":""},{"location":"docs/cyberclip/clipParser/#src.cyberclip.clipParser.clipParser.loadAction","title":"<code>loadAction()</code>","text":"<p>Load all actions defined in <code>action</code> directory.</p>"},{"location":"docs/cyberclip/clipParser/#src.cyberclip.clipParser.clipParser.loadAction--returns","title":"Returns","text":"<p>import('userAction',fromlist=actionModules)</p>"},{"location":"docs/cyberclip/clipParser/#src.cyberclip.clipParser.clipParser.moduleLoader","title":"<code>moduleLoader(module_instance, module_name)</code>","text":"<p>Load all class defined in <code>module_name</code> directory.</p>"},{"location":"docs/cyberclip/clipParser/#src.cyberclip.clipParser.clipParser.moduleLoader--returns","title":"Returns","text":"<p>import('module_name',fromlist=parserModules)</p>"},{"location":"docs/cyberclip/clipParser/#src.cyberclip.clipParser.clipParser.parseData","title":"<code>parseData(data)</code>","text":"<p>Handle textual datas and return a dict containing matches and type of data detected.</p>"},{"location":"docs/cyberclip/clipParser/#src.cyberclip.clipParser.clipParser.parseData--returns","title":"Returns","text":"<p>{\"matches\" : matches, \"detectedType\" : detectedType}</p>"},{"location":"docs/cyberclip/clipboardHandler/","title":"clipboardHandler","text":""},{"location":"docs/cyberclip/clipboardHandler/#src.cyberclip.clipboardHandler.enum_files_from_clipboard","title":"<code>enum_files_from_clipboard(mime)</code>","text":"<p>Generates absolute paths from clipboard  Returns unverified absolute file/dir paths based on defined mime type</p>"},{"location":"docs/cyberclip/clipboardHandler/#src.cyberclip.clipboardHandler.get_clipboard_files","title":"<code>get_clipboard_files(folders=False)</code>","text":"<p>Enumerate clipboard content and return files/folders either directly copied or highlighted path copied</p>"},{"location":"docs/cyberclip/clipboardHandler/#src.cyberclip.clipboardHandler.get_clipboard_formats","title":"<code>get_clipboard_formats()</code>","text":"<p>Return list of all data formats currently in the clipboard</p>"},{"location":"docs/cyberclip/genericEnricher/","title":"genericEnricher","text":""},{"location":"docs/cyberclip/genericEnricher/#src.cyberclip.genericEnricher.GenericEnricher","title":"<code>GenericEnricher(df, config='undefined', configFile='./input/config.yml')</code>","text":""},{"location":"docs/cyberclip/genericEnricher/#src.cyberclip.genericEnricher.GenericEnricher.simple_enrich","title":"<code>simple_enrich()</code>","text":"<p>It\u00e9re sur les diff\u00e9rentes enrichissements.</p> <p>Les configurations doivent obligatoirement contenir le champs effective a <code>True</code>. Il doit aussi contenir les champs name, agregate et type.</p> <p>:return A list of nodes usable in graphene with id, label, propri\u00e9t\u00e9s \u00e0 la racine et une liste de propri\u00e9t\u00e9s.</p>"},{"location":"docs/cyberclip/tools/","title":"Tools","text":""},{"location":"docs/cyberclip/userAction/AutonomousSystemAction/","title":"AutonomousSystemAction","text":""},{"location":"docs/cyberclip/userAction/AutonomousSystemAction/#src.cyberclip.userAction.AutonomousSystemAction.AsToCidrAction","title":"<code>AsToCidrAction(parsers={}, supportedType={'asnum'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>Return a list of CIDR depending of an Autonomous System.</p>"},{"location":"docs/cyberclip/userAction/AutonomousSystemAction/#src.cyberclip.userAction.AutonomousSystemAction.IpToAsAction","title":"<code>IpToAsAction(parsers={}, supportedType={'ipv6', 'ip'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>Return Autonomous System information refering to an IP.</p>"},{"location":"docs/cyberclip/userAction/CIDRAction/","title":"CIDRAction","text":""},{"location":"docs/cyberclip/userAction/CIDRAction/#src.cyberclip.userAction.CIDRAction.ToCIDR24Action","title":"<code>ToCIDR24Action(parsers={}, supportedType={'cidr', 'ip'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to return a list of /24 CIDR from a bigger CIDR.</p>"},{"location":"docs/cyberclip/userAction/DNSAction/","title":"DNSAction","text":""},{"location":"docs/cyberclip/userAction/DNSAction/#src.cyberclip.userAction.DNSAction.DNSAction","title":"<code>DNSAction(parsers={}, supportedType={'ipv6', 'ip', 'domain'}, complex_param=CONF)</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to return reverse DNS for an IP, and DNS for a domain. For a domain the a list of DNS reccord can be specified (default A) : ie. AAA,SPF,TXT.</p>"},{"location":"docs/cyberclip/userAction/FileAction/","title":"FileAction","text":""},{"location":"docs/cyberclip/userAction/FileAction/#src.cyberclip.userAction.FileAction.CalculateHashAction","title":"<code>CalculateHashAction(parsers={}, supportedType={'filename'}, complex_param=CONF)</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to calculate hashes from files contained in the clipboard. Default : MD5 and SHA1</p>"},{"location":"docs/cyberclip/userAction/FileAction/#src.cyberclip.userAction.FileAction.ExtractTextAction","title":"<code>ExtractTextAction(parsers={}, supportedType={'filename'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to extract text from files contained in the clipboard. Make use of textract lib.</p>"},{"location":"docs/cyberclip/userAction/HtmlExtractAction/","title":"HtmlExtractAction","text":""},{"location":"docs/cyberclip/userAction/HtmlExtractAction/#src.cyberclip.userAction.HtmlExtractAction.HtmlExtractAction","title":"<code>HtmlExtractAction(parsers={}, supportedType={'html'}, param_data='h1, h2, h3, h4, h5, p')</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to extract tags from an HTML document. Extract paragraph and title by default For example :     <code>td &gt; b</code> : Extract all the bold tags inside a table     <code>#password</code> : Extract all the Html tags with the #password id</p>"},{"location":"docs/cyberclip/userAction/HtmlExtractAction/#src.cyberclip.userAction.HtmlExtractAction.HtmlExtractTextAction","title":"<code>HtmlExtractTextAction(parsers={}, supportedType={'html'}, param_data='h1, h2, h3, h4, h5, p')</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to extract text from an HTML document. Extract paragraph and title by default For example :     <code>td &gt; b</code> : Extract all the bold text inside a table     <code>#password</code> : Extract text from all the Html tags with the #password id</p>"},{"location":"docs/cyberclip/userAction/JSONExtractAction/","title":"JSONExtractAction","text":""},{"location":"docs/cyberclip/userAction/JSONExtractAction/#src.cyberclip.userAction.JSONExtractAction.JSONExtractAction","title":"<code>JSONExtractAction(parsers={}, supportedType={'json', 'yaml'}, complex_param=CONF)</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to extract data from an JSON. Use jsonpath module.</p>"},{"location":"docs/cyberclip/userAction/MittreAction/","title":"MittreAction","text":""},{"location":"docs/cyberclip/userAction/MittreAction/#src.cyberclip.userAction.MittreAction.MitreAction","title":"<code>MitreAction(parsers={}, supportedType={'mitre'}, param_data='')</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to explain Mitre Att&amp;ck TTP Code. Return the name, and the Mitre URL of a tactic.</p>"},{"location":"docs/cyberclip/userAction/URLOpenAction/","title":"URLOpenAction","text":""},{"location":"docs/cyberclip/userAction/URLOpenAction/#src.cyberclip.userAction.URLOpenAction.URLOpenAction","title":"<code>URLOpenAction(parsers={}, supportedType={'url'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>Open all the URL with the default browser.</p>"},{"location":"docs/cyberclip/userAction/UrlRequestAction/","title":"UrlRequestAction","text":""},{"location":"docs/cyberclip/userAction/UrlRequestAction/#src.cyberclip.userAction.UrlRequestAction.GetCertificatesAction","title":"<code>GetCertificatesAction(parsers={}, supportedType={'domain', 'ip'}, complex_param=CONF)</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to recover certificate from Domain or IP.</p>"},{"location":"docs/cyberclip/userAction/UrlRequestAction/#src.cyberclip.userAction.UrlRequestAction.UrlToFaviconHashAction","title":"<code>UrlToFaviconHashAction(parsers={}, supportedType={'url', 'domain'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to recover mmh3 hash of a favicon for a domain or Url. Perform a get request on the URL with a desktop-like User-Agent.</p>"},{"location":"docs/cyberclip/userAction/UrlRequestAction/#src.cyberclip.userAction.UrlRequestAction.UrlToHtmlAction","title":"<code>UrlToHtmlAction(parsers={}, supportedType={'url'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to recover HTML from an URL. Perform a get request on the URL with a desktop-like User-Agent.</p>"},{"location":"docs/cyberclip/userAction/actionInterface/","title":"actionInterface","text":""},{"location":"docs/cyberclip/userAction/actionInterface/#src.cyberclip.userAction.actionInterface.actionInterface","title":"<code>actionInterface(parsers={}, supportedType={}, param_data='', complex_param={})</code>","text":"<p>Parser Interface defines the minimum functions a parser needs to implement.</p> <p>parsers is a list of objects that implements ParserInterface. supportedType is a list of type defined in the varaible <code>parsertype</code> that are supported by the current action. param is a small textual parameter typically to pass to a simple script which is not mandatory, such as flags. complex_param are used to generate a TUI to ask for them or can be entered as is, typically for file name, config, etc...</p>"},{"location":"docs/cyberclip/userAction/actionInterface/#src.cyberclip.userAction.actionInterface.actionInterface.get_observables","title":"<code>get_observables()</code>","text":"Populate the observables with a dict of this form <p>:[] <p>Reset the results variables.</p>"},{"location":"docs/cyberclip/userAction/addYetiAction/","title":"addYetiAction","text":""},{"location":"docs/cyberclip/userAction/addYetiAction/#src.cyberclip.userAction.addYetiAction.searchYetiAction","title":"<code>searchYetiAction(parsers={}, supportedType={'ip', 'ipv6', 'domain', 'mail', 'url'}, complex_param={'Source': '', 'Threat': [], 'Campaign': [], 'Tags': []})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to add observables contained in the keyboard to Yeti via the API. A config is needed :</p> <p>Yeti: - url: http://127.0.0.1:5000 - api-key:"},{"location":"docs/cyberclip/userAction/appendEachLineAction/","title":"appendEachLineAction","text":""},{"location":"docs/cyberclip/userAction/appendEachLineAction/#src.cyberclip.userAction.appendEachLineAction.appendEachLineAction","title":"<code>appendEachLineAction(parsers={}, supportedType={'text'}, param_data='')</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to append data to each line of a given text. Add the text to add as a param.</p>"},{"location":"docs/cyberclip/userAction/base64Action/","title":"base64Action","text":""},{"location":"docs/cyberclip/userAction/base64Action/#src.cyberclip.userAction.base64Action.B64DecodeAction","title":"<code>B64DecodeAction(parsers={}, supportedType={'b64'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to decode base 64. For example :     - dG90bw== returns toto</p>"},{"location":"docs/cyberclip/userAction/base64Action/#src.cyberclip.userAction.base64Action.B64EncodeAction","title":"<code>B64EncodeAction(parsers={}, supportedType={'text'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to encode in base 64. For example :     - toto returns dG90bw==</p>"},{"location":"docs/cyberclip/userAction/baseUrlAction/","title":"baseUrlAction","text":""},{"location":"docs/cyberclip/userAction/baseUrlAction/#src.cyberclip.userAction.baseUrlAction.baseUrlAction","title":"<code>baseUrlAction(parsers={}, supportedType={'url', 'domain', 'ip', 'ipv6'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to return a link from a domain or an URL to the base dir. For example : </p> <ul> <li><code>https://www.example.com/path/of/page</code> returns <code>https://www.example.com/</code></li> <li><code>www.example.com</code> returns <code>https://www.example.com/</code></li> </ul>"},{"location":"docs/cyberclip/userAction/countAction/","title":"countAction","text":""},{"location":"docs/cyberclip/userAction/countAction/#src.cyberclip.userAction.countAction.countAction","title":"<code>countAction(parsers={}, supportedType={'text'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to count lines contained in a text.</p> Return <p>"},{"location":"docs/cyberclip/userAction/extractAction/","title":"extractAction","text":""},{"location":"docs/cyberclip/userAction/extractAction/#src.cyberclip.userAction.extractAction.extractAction","title":"<code>extractAction(parsers={}, supportedType={'all', 'text'}, exception=['text', 'html', 'json', 'yaml'])</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>Extract all the observables.</p>"},{"location":"docs/cyberclip/userAction/findReplaceAction/","title":"findReplaceAction","text":""},{"location":"docs/cyberclip/userAction/findReplaceAction/#src.cyberclip.userAction.findReplaceAction.findReplaceAction","title":"<code>findReplaceAction(parsers={}, supportedType={'text'}, complex_param={'Search': '', 'Replace': ''})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to search and replace using regex.sub(). Enter the regex as a param.</p>"},{"location":"docs/cyberclip/userAction/prependAction/","title":"prependAction","text":""},{"location":"docs/cyberclip/userAction/prependAction/#src.cyberclip.userAction.prependAction.prependAction","title":"<code>prependAction(parsers={}, supportedType={'text'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to prepend data to a given text. Usefull for adding header to data. Add the text to add as a param.</p>"},{"location":"docs/cyberclip/userAction/prependEachLineAction/","title":"prependEachLineAction","text":""},{"location":"docs/cyberclip/userAction/prependEachLineAction/#src.cyberclip.userAction.prependEachLineAction.prependEachLineAction","title":"<code>prependEachLineAction(parsers={}, supportedType={'text'}, param_data='')</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to prepend data to all the lines of a given text. Enter the text to preprend as a param.</p>"},{"location":"docs/cyberclip/userAction/regexFilterAction/","title":"regexFilterAction","text":""},{"location":"docs/cyberclip/userAction/regexFilterAction/#src.cyberclip.userAction.regexFilterAction.regexFilterAction","title":"<code>regexFilterAction(parsers={}, supportedType={'text'}, param_data='')</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to filter lines matching a regex. Enter the regex as a param.</p>"},{"location":"docs/cyberclip/userAction/reverseRegexFilterAction/","title":"reverseRegexFilterAction","text":""},{"location":"docs/cyberclip/userAction/reverseRegexFilterAction/#src.cyberclip.userAction.reverseRegexFilterAction.reverseRegexFilterAction","title":"<code>reverseRegexFilterAction(parsers={}, supportedType={'text'}, param_data='')</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to delete lines matching a regex. Enter the regex as a param.</p>"},{"location":"docs/cyberclip/userAction/searchShodanAction/","title":"searchShodanAction","text":""},{"location":"docs/cyberclip/userAction/searchShodanAction/#src.cyberclip.userAction.searchShodanAction.searchInShodanAction","title":"<code>searchInShodanAction(parsers={}, supportedType={'ip'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>Search all type of observables with the Shodan API. The API Key is passed in the config file. Only IP are handled atm. No bulk search on basic plan, wait 1s between each querry.</p> <p>A configuration is neeeded : </p> <p>Shodan: - api-key:"},{"location":"docs/cyberclip/userAction/searchYetiAction/","title":"searchYetiAction","text":""},{"location":"docs/cyberclip/userAction/searchYetiAction/#src.cyberclip.userAction.searchYetiAction.searchYetiAction","title":"<code>searchYetiAction(parsers={}, supportedType={'ip', 'ipv6', 'domain', 'mail', 'url'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to search observables contained in the keyboard to Yeti API. A config is needed :</p> <p>Yeti: - url: http://127.0.0.1:5000 - api-key:"},{"location":"docs/cyberclip/userAction/sortAction/","title":"sortAction","text":""},{"location":"docs/cyberclip/userAction/sortAction/#src.cyberclip.userAction.sortAction.sortAction","title":"<code>sortAction(parsers={}, supportedType={'text'}, param_data='')</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to sort lines of a text. Parameter can be passed over :      - if desc or reverse in param revert the order     - if num, int, version in param sort by number</p>"},{"location":"docs/cyberclip/userAction/sortDedupAction/","title":"sortDedupAction","text":""},{"location":"docs/cyberclip/userAction/sortDedupAction/#src.cyberclip.userAction.sortDedupAction.sortDedupAction","title":"<code>sortDedupAction(parsers={}, supportedType={'text'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to sort and deduplicates lines contained in the keyboard.</p>"},{"location":"docs/cyberclip/userAction/toMarkdownAction/","title":"toMarkdownAction","text":""},{"location":"docs/cyberclip/userAction/toMarkdownAction/#src.cyberclip.userAction.toMarkdownAction.toMarkdownAction","title":"<code>toMarkdownAction(parsers={}, supportedType={'tsv'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to transform a TSV data to a Markdown table.</p>"},{"location":"docs/cyberclip/userAction/toRegexOr/","title":"toRegexOr","text":""},{"location":"docs/cyberclip/userAction/toRegexOr/#src.cyberclip.userAction.toRegexOr.regexOrAction","title":"<code>regexOrAction(parsers={}, supportedType={'text'}, param_data='')</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to transform lines to an OR regex For example if the text contain two lines with : a and b It will return a|b.</p>"},{"location":"docs/cyberclip/userAction/toSqlSearch/","title":"toSqlSearch","text":""},{"location":"docs/cyberclip/userAction/toSqlSearch/#src.cyberclip.userAction.toSqlSearch.toSqlSearchAction","title":"<code>toSqlSearchAction(parsers={}, supportedType={'text'})</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module, to transform lines to an Python list or an IN SQL querry. For example if the text contain two lines with : a and b It will return \"a\",\"b\".</p>"},{"location":"docs/cyberclip/userAction/topLinesAction/","title":"topLinesAction","text":""},{"location":"docs/cyberclip/userAction/topLinesAction/#src.cyberclip.userAction.topLinesAction.toplLinesAction","title":"<code>toplLinesAction(parsers={}, supportedType={'text'}, param_data='10')</code>","text":"<p>             Bases: <code>actionInterface</code></p> <p>A action module to crop data to only the N first lines. Default 10 lines.</p>"},{"location":"docs/cyberclip/userTypeParser/ASNumberParser/","title":"ASNumberParser","text":""},{"location":"docs/cyberclip/userTypeParser/ASNumberParser/#src.cyberclip.userTypeParser.ASNumberParser.asnumParser","title":"<code>asnumParser(text, parsertype='asnum')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for asnum strings.</p> <p>Code exemple ::     a = asnumParser(\"dqsdq. fdsf\")     b = asnumParser(\"AS2456\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/ASNumberParser/#src.cyberclip.userTypeParser.ASNumberParser.asnumParser.contains","title":"<code>contains()</code>","text":"<p>Return True if text contains at least one asnum.</p>"},{"location":"docs/cyberclip/userTypeParser/ASNumberParser/#src.cyberclip.userTypeParser.ASNumberParser.asnumParser.extract","title":"<code>extract()</code>","text":"<p>Return all asnum contained in text.</p> Return <p>asmums (list(str)): A list of as number with the following format : AS or as"},{"location":"docs/cyberclip/userTypeParser/B64Parser/","title":"B64Parser","text":""},{"location":"docs/cyberclip/userTypeParser/B64Parser/#src.cyberclip.userTypeParser.B64Parser.B64Parser","title":"<code>B64Parser(text, parsertype='b64')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for Base64 strings.</p> <p>Code exemple ::     a = asnumParser(\"dqsdq. fdsf\")     b = asnumParser(\"dG90bw==\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/B64Parser/#src.cyberclip.userTypeParser.B64Parser.B64Parser.contains","title":"<code>contains()</code>","text":"<p>Return True if text contains at least one base 64 line.</p>"},{"location":"docs/cyberclip/userTypeParser/B64Parser/#src.cyberclip.userTypeParser.B64Parser.B64Parser.extract","title":"<code>extract()</code>","text":"<p>Return all base64 lines contained in text.</p> Return <p>b64 (list(str)): A list of as number with the following format : AS or as"},{"location":"docs/cyberclip/userTypeParser/HtmlParser/","title":"HtmlParser","text":""},{"location":"docs/cyberclip/userTypeParser/HtmlParser/#src.cyberclip.userTypeParser.HtmlParser.HtmlParser","title":"<code>HtmlParser(text, parsertype='html')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for HTML strings.</p> <p>Code exemple ::     a = HtmlParser(\"dsfsd sdfsdf sdfsdhj j\")     b = HtmlParser(\"Hello, world\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p> <p>Source : https://stackoverflow.com/questions/24856035/how-to-detect-with-python-if-the-string-contains-html-code</p>"},{"location":"docs/cyberclip/userTypeParser/HtmlParser/#src.cyberclip.userTypeParser.HtmlParser.HtmlParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one Mitre TTP.</p>"},{"location":"docs/cyberclip/userTypeParser/HtmlParser/#src.cyberclip.userTypeParser.HtmlParser.HtmlParser.extract","title":"<code>extract()</code>","text":"<p>Return the whole text as object.</p>"},{"location":"docs/cyberclip/userTypeParser/IPParser/","title":"IPParser","text":""},{"location":"docs/cyberclip/userTypeParser/IPParser/#src.cyberclip.userTypeParser.IPParser.CIDRParser","title":"<code>CIDRParser(text, parsertype='cidr')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Parser for CIDR.</p>"},{"location":"docs/cyberclip/userTypeParser/IPParser/#src.cyberclip.userTypeParser.IPParser.CIDRParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one CIDR</p>"},{"location":"docs/cyberclip/userTypeParser/IPParser/#src.cyberclip.userTypeParser.IPParser.CIDRParser.extract","title":"<code>extract()</code>","text":"<p>Return all CIDR contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/IPParser/#src.cyberclip.userTypeParser.IPParser.ipv4Parser","title":"<code>ipv4Parser(text, parsertype='ip')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for ip strings.</p> <p>Code exemple ::     a = ipParser(\"1212.1.2.3\")     b = ipParser(\"1.2.3[.]4\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/IPParser/#src.cyberclip.userTypeParser.IPParser.ipv4Parser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one ip.</p>"},{"location":"docs/cyberclip/userTypeParser/IPParser/#src.cyberclip.userTypeParser.IPParser.ipv4Parser.extract","title":"<code>extract()</code>","text":"<p>Return all ip contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/IPParser/#src.cyberclip.userTypeParser.IPParser.ipv6Parser","title":"<code>ipv6Parser(text, parsertype='ipv6')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Parser for ipv6.</p>"},{"location":"docs/cyberclip/userTypeParser/IPParser/#src.cyberclip.userTypeParser.IPParser.ipv6Parser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one ip.</p>"},{"location":"docs/cyberclip/userTypeParser/IPParser/#src.cyberclip.userTypeParser.IPParser.ipv6Parser.extract","title":"<code>extract()</code>","text":"<p>Return all ip contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/JsonParser/","title":"JsonParser","text":""},{"location":"docs/cyberclip/userTypeParser/JsonParser/#src.cyberclip.userTypeParser.JsonParser.JSONParser","title":"<code>JSONParser(text, parsertype='json')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for JSON strings. Use json.loads</p> <p>Code exemple ::     a = JsonParser(\"ccdf \")     b = JsonParser(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/JsonParser/#src.cyberclip.userTypeParser.JsonParser.JSONParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains JSON valid data</p>"},{"location":"docs/cyberclip/userTypeParser/JsonParser/#src.cyberclip.userTypeParser.JsonParser.JSONParser.extract","title":"<code>extract()</code>","text":"<p>Return all JSON contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/MD5Parser/","title":"MD5Parser","text":""},{"location":"docs/cyberclip/userTypeParser/MD5Parser/#src.cyberclip.userTypeParser.MD5Parser.md5Parser","title":"<code>md5Parser(text, parsertype='md5')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for md5 strings.</p> <p>Code exemple ::     a = md5Parser(\"1.3.4.5\")     b = md5Parser(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/MD5Parser/#src.cyberclip.userTypeParser.MD5Parser.md5Parser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one md5.</p>"},{"location":"docs/cyberclip/userTypeParser/MD5Parser/#src.cyberclip.userTypeParser.MD5Parser.md5Parser.extract","title":"<code>extract()</code>","text":"<p>Return all md5 contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/MitreParser/","title":"MitreParser","text":""},{"location":"docs/cyberclip/userTypeParser/MitreParser/#src.cyberclip.userTypeParser.MitreParser.MitreParser","title":"<code>MitreParser(text, parsertype='mitre')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for URL strings.</p> <p>Code exemple ::     a = URLParser(\"dsfsd sdfsdf sdfsdhj j\")     b = URLParser(\"http://youpi.google.com/test.php?q=3Rte\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/MitreParser/#src.cyberclip.userTypeParser.MitreParser.MitreParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one Mitre TTP.</p>"},{"location":"docs/cyberclip/userTypeParser/MitreParser/#src.cyberclip.userTypeParser.MitreParser.MitreParser.extract","title":"<code>extract()</code>","text":"<p>Return all TTP contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/ParserInterface/","title":"ParserInterface","text":""},{"location":"docs/cyberclip/userTypeParser/ParserInterface/#src.cyberclip.userTypeParser.ParserInterface.ParserInterface","title":"<code>ParserInterface(text, parsertype='interface')</code>","text":"<p>Parser Interface defines the minimum functions a parser needs to implement.</p>"},{"location":"docs/cyberclip/userTypeParser/ParserInterface/#src.cyberclip.userTypeParser.ParserInterface.ParserInterface.contains","title":"<code>contains()</code>","text":"<p>Have to return true if input text contains the parsed type.</p>"},{"location":"docs/cyberclip/userTypeParser/ParserInterface/#src.cyberclip.userTypeParser.ParserInterface.ParserInterface.extract","title":"<code>extract()</code>","text":"<p>Extract a list of objects of parsed type.</p>"},{"location":"docs/cyberclip/userTypeParser/PhoneParser/","title":"PhoneParser","text":""},{"location":"docs/cyberclip/userTypeParser/PhoneParser/#src.cyberclip.userTypeParser.PhoneParser.phoneParser","title":"<code>phoneParser(text, parsertype='phone')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for phone strings.</p> <p>Code exemple ::     a = phoneParser(\"dqdsdqsd\")     b = phoneParser(\"70011223344\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/PhoneParser/#src.cyberclip.userTypeParser.PhoneParser.phoneParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one phone.</p>"},{"location":"docs/cyberclip/userTypeParser/PhoneParser/#src.cyberclip.userTypeParser.PhoneParser.phoneParser.extract","title":"<code>extract()</code>","text":"<p>Return all phone contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/TSVParser/","title":"TSVParser","text":""},{"location":"docs/cyberclip/userTypeParser/TSVParser/#src.cyberclip.userTypeParser.TSVParser.tsvParser","title":"<code>tsvParser(text, parsertype='tsv')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for tsv strings.</p> <p>Code exemple ::     a = tsvParser(\"ccdf \")     b = tsvParser(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/TSVParser/#src.cyberclip.userTypeParser.TSVParser.tsvParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains TSV data in at least two columns.</p>"},{"location":"docs/cyberclip/userTypeParser/TSVParser/#src.cyberclip.userTypeParser.TSVParser.tsvParser.extract","title":"<code>extract()</code>","text":"<p>Return all tsv contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/TextParser/","title":"TextParser","text":""},{"location":"docs/cyberclip/userTypeParser/TextParser/#src.cyberclip.userTypeParser.TextParser.TextParser","title":"<code>TextParser(text, parsertype='text')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for text. If the text is not the blank string return True. Allow to make transforms on a text.</p> <p>Code exemple ::     a = TextParser(\"1.3.4.5\")     b = TextParser(\"toto\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/TextParser/#src.cyberclip.userTypeParser.TextParser.TextParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text is not blank.</p>"},{"location":"docs/cyberclip/userTypeParser/TextParser/#src.cyberclip.userTypeParser.TextParser.TextParser.extract","title":"<code>extract()</code>","text":"<p>Return the whole text as object.</p>"},{"location":"docs/cyberclip/userTypeParser/URLParser/","title":"URLParser","text":""},{"location":"docs/cyberclip/userTypeParser/URLParser/#src.cyberclip.userTypeParser.URLParser.URLParser","title":"<code>URLParser(text, parsertype='url')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for URL strings.</p> <p>Code exemple ::     a = URLParser(\"dsfsd sdfsdf sdfsdhj j\")     b = URLParser(\"http://youpi.google.com/test.php?q=3Rte\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/URLParser/#src.cyberclip.userTypeParser.URLParser.URLParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one URL.</p>"},{"location":"docs/cyberclip/userTypeParser/URLParser/#src.cyberclip.userTypeParser.URLParser.URLParser.extract","title":"<code>extract()</code>","text":"<p>Return all URL contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/YamlParser/","title":"YamlParser","text":""},{"location":"docs/cyberclip/userTypeParser/YamlParser/#src.cyberclip.userTypeParser.YamlParser.YamlParser","title":"<code>YamlParser(text, parsertype='yaml')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for Yaml strings. Use <code>yaml.safe_load</code></p> <p>Code exemple ::     a = YamlParser(\"ccdf \")     b = YamlParser(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/YamlParser/#src.cyberclip.userTypeParser.YamlParser.YamlParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains Yaml valid data</p>"},{"location":"docs/cyberclip/userTypeParser/YamlParser/#src.cyberclip.userTypeParser.YamlParser.YamlParser.extract","title":"<code>extract()</code>","text":"<p>Return all JSON contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/domainParser/","title":"domainParser","text":""},{"location":"docs/cyberclip/userTypeParser/domainParser/#src.cyberclip.userTypeParser.domainParser.domainParser","title":"<code>domainParser(text, parsertype='domain')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for domain strings.</p> <p>Code exemple ::     a = domainParser(\"dqsdq. fdsf\")     b = domainParser(\"domain.com\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/domainParser/#src.cyberclip.userTypeParser.domainParser.domainParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one domain.</p>"},{"location":"docs/cyberclip/userTypeParser/domainParser/#src.cyberclip.userTypeParser.domainParser.domainParser.extract","title":"<code>extract()</code>","text":"<p>Return all domain contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/filenameParser/","title":"filenameParser","text":""},{"location":"docs/cyberclip/userTypeParser/filenameParser/#src.cyberclip.userTypeParser.filenameParser.filenameParser","title":"<code>filenameParser(text, parsertype='filename')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for FileName strings.</p> <p>Code exemple ::     a = filenameParser(\"dsfsd sdfsdf sdfsdhj j\")     b = filenameParser('C:/Users/svernin/AppData/Local/Temp/Sans titre.jpg')     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/filenameParser/#src.cyberclip.userTypeParser.filenameParser.filenameParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one filename.</p>"},{"location":"docs/cyberclip/userTypeParser/filenameParser/#src.cyberclip.userTypeParser.filenameParser.filenameParser.extract","title":"<code>extract()</code>","text":"<p>Return all filenames contained in text and existing in the filesystem.</p>"},{"location":"docs/cyberclip/userTypeParser/mailParser/","title":"mailParser","text":""},{"location":"docs/cyberclip/userTypeParser/mailParser/#src.cyberclip.userTypeParser.mailParser.mailParser","title":"<code>mailParser(text, parsertype='mail')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for mail strings.</p> <p>Code exemple ::     a = mailParser(\"1.3.4.5\")     b = mailParser(\"toto@domain.com\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/mailParser/#src.cyberclip.userTypeParser.mailParser.mailParser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one mail.</p>"},{"location":"docs/cyberclip/userTypeParser/mailParser/#src.cyberclip.userTypeParser.mailParser.mailParser.extract","title":"<code>extract()</code>","text":"<p>Return all mail contained in text.</p>"},{"location":"docs/cyberclip/userTypeParser/sha1Parser/","title":"sha1Parser","text":""},{"location":"docs/cyberclip/userTypeParser/sha1Parser/#src.cyberclip.userTypeParser.sha1Parser.SHA1Parser","title":"<code>SHA1Parser(text, parsertype='sha1')</code>","text":"<p>             Bases: <code>ParserInterface</code></p> <p>Implementation of ParserInterface for SHA1 strings.</p> <p>Code exemple ::     a = SHA1Parser(\"ccdf \")     b = SHA1Parser(\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\")     print(a.extract(), a.contains())     print(b.extract(), b.contains())</p>"},{"location":"docs/cyberclip/userTypeParser/sha1Parser/#src.cyberclip.userTypeParser.sha1Parser.SHA1Parser.contains","title":"<code>contains()</code>","text":"<p>Return true if text contains at least one SHA1.</p>"},{"location":"docs/cyberclip/userTypeParser/sha1Parser/#src.cyberclip.userTypeParser.sha1Parser.SHA1Parser.extract","title":"<code>extract()</code>","text":"<p>Return all SHA1 contained in text.</p>"}]}